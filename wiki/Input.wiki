#summary ParaFEM ASCII input decks explained

<wiki:toc max_depth="2" />

= Introduction =

This page describes the format of the ParaFEM ASCII input decks. The input decks comprise a number of separate files:

||{{{.dat}}}|| Basic control data||
||{{{.d}}}  || The geometry of the problem||
||{{{.bnd}}}|| The boundary conditions||
||{{{.lds}}}|| The loads to be applied||

The philosophy behind having separate files is that it reduces the burden of data transfer when running very large problems on parallel supercomputers. An enhancement to ParaFEM for those running smaller problems would be to allow the user to decide whether to use a single input file or have several separate files as defined here.

= The .dat file =

Each example program typically requires a control data file called {{{<job_name>.dat}}}. This contains basic data about the problem such as the number of elements and nodes in the model, as well as parameters required by the solver. Please refer to the [http://eu.wiley.com/WileyCDA/WileyTitle/productCd-0470849703.html book] for further details.

= The .d file =

The ".d" format is based on the DANFE format created by Dr Daniel Kidger, a former Lecturer at the University of Manchester. ".d" files can be viewed in the [ParaFEMViewerManual ParaFEM-Viewer].

A typical ".d" file has the following format:

{{{
*THREE_DIMENSIONAL
*NODES
nodeID x-coordinate y-coordinate z-coordinate
*ELEMENTS''
elementID ndim nod type num materialID
}}}

||*Variable Name*||*Type*||*Purpose*||
||{{{*THREE_DIMENSIONAL}}} || Character || A keyword describing the model as three dimensional. ||
||{{{*NODES}}} || Character || A keyword marking the start of a list of nodes and their coordinates. ||
||{{{*ELEMENTS}}} || Character || A keyword marking the start of a list of element data. ||
||{{{nodeID}}} || Integer || A unique number that identifies the node. PalaeoFEM assumes sequential numbering from 1 to nn. ||
||{{{x-coordinate}}} || Real || The x-coordinate of the node. ||
||{{{y-coordinate}}} || Real || The y-coordinate of the node. ||
||{{{z-coordinate}}} || Real || The z-coordinate of the node. ||
||{{{elementID}}} || Integer || A unique number that identifies the element. PalaeoFEM assumes sequential numbering from 1 to nels.||
||{{{ndim}}} || Integer || The number of dimensions. PalaeoFEM only supports 3D elements. ||
||{{{nod}}} || Integer || The number of nodes in the element. PalaeoFEM only supports the values 4, 8, 10, 20: 4-node tetrahedra, 8-node hexahedra, 10-node tetrahedra and 20-node hexahedra. ||
||{{{type}}} || Integer || Code for element type. Default is 1.||
||{{{num}}} || Integer List || A list of nodes that belong to the element. 4 nodes are expected for 4-node tetrahedra, 8 nodes for 8-node hexahedra and so on. Refer to Smith and Griffiths for the correct node ordering.||
||{{{materialID}}} || Integer || A number that identifies which material properties to select for the element.||

A real example follows:

{{{
*THREE_DIMENSIONAL
*NODES
1   15.0989017   2.49846721  0.940066218
2   15.0960474   2.40614152  0.983345568
3   15.0937481   2.51739144  0.975006104
4   15.0070047   2.48403239  0.964258492
5   15.1986771    2.4753387  0.957266092
*ELEMENTS
1  3  4  1  1  2  3  4  1
2  3  4  1  5  2  3  1  1
}}}

Note that in the '*'ELEMENTS section, ABAQUS would have:

{{{
1  1  2  3  4
2  5  2  3  1 
}}}

So, in this case, if you were converting an Abaqus .inp file to ParaFEM ASCII format manually, you need to insert 3 4 1 and 1.

{{{
1  3  4  1  1  2  3  4  1
2  3  4  1  5  2  3  1  1
}}}

= The .bnd file =

A typical ".bnd" file has the following format:

{{{
nodeID-1  restraint_x  restraint_y  restraint_z
nodeID-2  restraint_x  restraint_y  restraint_z
nodeID-3  restraint_x  restraint_y  restraint_z
...
nodeID-nr restraint_x  restraint_y  restraint_z
}}}

|| *Variable Name* || *Type* || *Purpose* ||
||{{{nodeID}}} || Integer || A unique number that identifies the node. ParaFEM assumes sequential numbering from 1 to {{{nr}}}, shown here as {{{nodeID-1, nodeID-2, nodeID-3,,, ... , nodeID-nr}}}. Nodes where all the restraints are free need not be included.||
||{{{restraint_x}}} || Integer || Restraint in X direction. The convention is that 0 = restrained and 1 = free. ||
||{{{restraint_y}}} || Integer || Restraint in Y direction. The convention is that 0 = restrained and 1 = free. ||
||{{{restraint_z}}} || Integer || Restraint in Z direction. The convention is that 0 = restrained and 1 = free. ||
||{{{nr}}} || Integer || Number of restrained nodes. This is expected to be less than the total number of nodes in the mesh, {{{nn}}} ||

A real example follows:

{{{
24616  0  1  1
24652  1  0  1
24654  1  1  0
24655  0  0  1
24656  1  0  0
24689  0  1  0
24690  0  0  0
}}}

The significance of the "{{{0}}}" or "{{{1}}}" coding is explained below:

{{{ 
24616  0  1  1  restrained in x 
24652  1  0  1  restrained in y
24654  1  1  0  restrained in z
24655  0  0  1  restrained in x, y
24656  1  0  0  restrained in y, z
24689  0  1  0  restrained in x, z
24690  0  0  0  restrained in x, y and z
}}}

By default, all nodes that are not listed will not be restrained in x, y or z.

= The .lds file =

The ".lds" file has the following format:

{{{
nodeID-1 value_x value_y value_z
nodeID-2 value_x value_y value_z
nodeID-3 value_x value_y value_z
...
nodeID-loaded_nodes value_x value_y value_z
}}}

|| *Variable Name* || *Type* || *Purpose* ||
||{{{nodeID}}} || Integer || A unique number that identifies the loaded node. ParaFEM assumes sequential numbering from {{{1 to loaded_nodes}}}, shown here as {{{nodeID-1, nodeID-2, nodeID-3, ... , nodeID-loaded_nodes}}}. Nodes which do not have applied loads need not be included.||
||{{{value_x}}} || Real || Value of load applied in X direction. ||
||{{{value_y}}} || Real || Value of load applied in Y direction. ||
||{{{value_z}}} || Real || Value of load applied in Z direction. ||
||{{{loaded_nodes}}} || Integer || The number of loaded nodes in the model. ||

A real example follows:

{{{
11935 0. 0. 2.08333333
11936 0. 0. 8.33333333
27347 0. 0. 4.16666666
27349 0. 0. 8.33333333
}}}