#summary ParaFEM ASCII input decks explained
#sidebar TOC
<wiki:toc max_depth="2" />

= Introduction =

This page describes the format of the ParaFEM ASCII input decks. The input decks comprise a number of separate files:

||*File extension*||*Content*||*Needed by program*||
||{{{.dat}}}|| Basic control data||p121, p126, p129, xx11||
||{{{.d}}}  || The geometry of the problem||p121, p126, p129||
||{{{.bnd}}}|| The boundary conditions||p121, p126, p129||
||{{{.lds}}}|| The loads to be applied||p121, p129||
||{{{.mat}}}|| The material properties ||p1211, p1213||
||{{{.nset}}}|| Node sets||kubcgen||

The philosophy behind having separate files is that it reduces the burden of data transfer when running very large problems on parallel supercomputers. An enhancement to ParaFEM for those running smaller problems would be to allow the user to decide whether to use a single input file or have several separate files as defined here.

_If you experience difficulties, please note we are modifying the input decks in the svn repository so that users may select between two different partitioning strategies. This requires updating the software, the examples and the documentation. LM 6 June 2011_

= The .dat file =

Each example program typically requires a control data file called {{{<job_name>.dat}}}. This contains basic data about the problem such as the number of elements and nodes in the model, as well as parameters required by the solver. Please click on the following links for program specific details: [p121dat p121.dat], [p126dat p126.dat], [p129dat p129.dat], [p1213dat p1213.dat], [xx11dat xx11.dat].

= The .d file =

The ".d" format is based on the DANFE format created by Dr Daniel Kidger, a former Lecturer at the University of Manchester. ".d" files can be viewed in the [ParaFEMViewerManual ParaFEM-Viewer].

A typical ".d" file has the following format:

{{{
*THREE_DIMENSIONAL
*NODES
nodeID x-coordinate y-coordinate z-coordinate
*ELEMENTS''
elementID ndim nod type num materialID
}}}

||*Variable Name*||*Type*||*Purpose*||
||{{{*THREE_DIMENSIONAL}}} || Character || A keyword describing the model as three dimensional. ||
||{{{*NODES}}} || Character || A keyword marking the start of a list of nodes and their coordinates. ||
||{{{*ELEMENTS}}} || Character || A keyword marking the start of a list of element data. ||
||{{{nodeID}}} || Integer || A unique number that identifies the node. ParaFEM assumes sequential numbering from 1 to nn. ||
||{{{x-coordinate}}} || Real || The x-coordinate of the node. ||
||{{{y-coordinate}}} || Real || The y-coordinate of the node. ||
||{{{z-coordinate}}} || Real || The z-coordinate of the node. ||
||{{{elementID}}} || Integer || A unique number that identifies the element. ParaFEM assumes sequential numbering from 1 to nels.||
||{{{ndim}}} || Integer || The number of dimensions. ParaFEM only supports 3D elements. ||
||{{{nod}}} || Integer || The number of nodes in the element. ParaFEM only supports the values 4, 8, 10, 20: 4-node tetrahedra, 8-node hexahedra, 10-node tetrahedra and 20-node hexahedra. ||
||{{{type}}} || Integer || Code for element type. Default is 1.||
||{{{num}}} || Integer List || A list of nodes that belong to the element. 4 nodes are expected for 4-node tetrahedra, 8 nodes for 8-node hexahedra and so on. Refer to Smith and Griffiths for the correct node ordering.||
||{{{materialID}}} || Integer || A number that identifies which material properties to select for the element.||

A real example follows:

{{{
*THREE_DIMENSIONAL
*NODES
1   15.0989017   2.49846721  0.940066218
2   15.0960474   2.40614152  0.983345568
3   15.0937481   2.51739144  0.975006104
4   15.0070047   2.48403239  0.964258492
5   15.1986771    2.4753387  0.957266092
*ELEMENTS
1  3  4  1  1  2  3  4  1
2  3  4  1  5  2  3  1  1
}}}

Note that in the '*'ELEMENTS section, ABAQUS would have:

{{{
1  1  2  3  4
2  5  2  3  1 
}}}

So, in this case, if you were converting an Abaqus .inp file to ParaFEM ASCII format manually, you need to insert 3 4 1 and 1.

{{{
1  3  4  1  1  2  3  4  1
2  3  4  1  5  2  3  1  1
}}}

= The .bnd file =

A typical ".bnd" file has the following format:

{{{
nodeID-1  restraint_x  restraint_y  restraint_z
nodeID-2  restraint_x  restraint_y  restraint_z
nodeID-3  restraint_x  restraint_y  restraint_z
...
nodeID-nr restraint_x  restraint_y  restraint_z
}}}

|| *Variable Name* || *Type* || *Purpose* ||
||{{{nodeID}}} || Integer || A unique number that identifies the node. ParaFEM assumes sequential numbering from 1 to {{{nr}}}, shown here as {{{nodeID-1, nodeID-2, nodeID-3,,, ... , nodeID-nr}}}. Nodes where all the restraints are free need not be included.||
||{{{restraint_x}}} || Integer || Restraint in X direction. The convention is that 0 = restrained and 1 = free. ||
||{{{restraint_y}}} || Integer || Restraint in Y direction. The convention is that 0 = restrained and 1 = free. ||
||{{{restraint_z}}} || Integer || Restraint in Z direction. The convention is that 0 = restrained and 1 = free. ||
||{{{nr}}} || Integer || Number of restrained nodes. This is expected to be less than the total number of nodes in the mesh, {{{nn}}} ||

A real example follows:

{{{
24616  0  1  1
24652  1  0  1
24654  1  1  0
24655  0  0  1
24656  1  0  0
24689  0  1  0
24690  0  0  0
}}}

The significance of the "{{{0}}}" or "{{{1}}}" coding is explained below:

{{{ 
24616  0  1  1  restrained in x 
24652  1  0  1  restrained in y
24654  1  1  0  restrained in z
24655  0  0  1  restrained in x, y
24656  1  0  0  restrained in y, z
24689  0  1  0  restrained in x, z
24690  0  0  0  restrained in x, y and z
}}}

By default, all nodes that are not listed will not be restrained in x, y or z.

= The .lds file =

The ".lds" file has the following format:

{{{
nodeID-1 value_x value_y value_z
nodeID-2 value_x value_y value_z
nodeID-3 value_x value_y value_z
...
nodeID-loaded_nodes value_x value_y value_z
}}}

|| *Variable Name* || *Type* || *Purpose* ||
||{{{nodeID}}} || Integer || A unique number that identifies the loaded node. ParaFEM assumes sequential numbering from {{{1 to loaded_nodes}}}, shown here as {{{nodeID-1, nodeID-2, nodeID-3, ... , nodeID-loaded_nodes}}}. Nodes which do not have applied loads need not be included.||
||{{{value_x}}} || Real || Value of load applied in X direction. ||
||{{{value_y}}} || Real || Value of load applied in Y direction. ||
||{{{value_z}}} || Real || Value of load applied in Z direction. ||
||{{{loaded_nodes}}} || Integer || The number of loaded nodes in the model. ||

A real example follows:

{{{
11935 0. 0. 2.08333333
11936 0. 0. 8.33333333
27347 0. 0. 4.16666666
27349 0. 0. 8.33333333
}}}

= The .mat file =

The ".mat" file has the following format:

{{{
np_types
matID-1 e v
matID-2 e v
matID-3 e v
...
matID-np_types e v
}}}

|| *Variable Name* || *Type* || *Purpose* ||
||{{{np_types}}} || Integer || Number of different property types.||
||{{{matID}}} || Integer || A unique number that identifies the material type.||
||{{{e}}} || Real || Young's modulus. ||
||{{{v}}} || Real || Poisson's ratio. ||

A real example follows:

{{{
5
1  500.0 0.15
2 1000.0 0.20
3 1500.0 0.25
4 2000.0 0.30
5 3000.0 0.35
}}}

_Note: This file format currently only supports isotropic materials. For p1211, there is an additional scalar real variable, undrained shear strength._
= The .nset file =

The ".nset" file is used by preprocessing tool {{{kubcgen}}} (_which is under development_) and has the following format:

{{{
nset_type
nsets
nnset(1)
nodeID-1 nodeID-2 nodeID-3 nodeID-4 nodeID-5 nodeID-6
nodeID-7 nodeID-8 nodeID-9 nodeID-10 nodeID-11 nodeID-12
...
nodeID-nnset(1)
nnset(2)
nodeID-1 nodeID-2 nodeID-3 nodeID-4 nodeID-5 nodeID-6
nodeID-7 nodeID-8 nodeID-9 nodeID-10 nodeID-11 nodeID-12
...
nodeID-nnset(2)
...
...
...
nnset(nsets)
nodeID-1 nodeID-2 nodeID-3 nodeID-4 nodeID-5 nodeID-6
nodeID-7 nodeID-8 nodeID-9 nodeID-10 nodeID-11 nodeID-12
...
nodeID-nnset(nsets)
}}}

|| *Variable Name* || *Type* || *Purpose* ||
||{{{nset_type}}} || Character || Problem type. Only supported value is {{{'kubc'}}}.||
||{{{nsets}}} || Integer || Number of node sets in the file. For {{{'kubc'}}} the correct value is 6.||
||{{{nnset}}} || Integer || Number of nodes in the node set.||
||{{{nodeID}}} || Integer || A unique number that identifies the node number.||

A real example follows:

{{{
'kubc'
6
12
234 245 257 259 269 270
271 273 274 279 281 282
11
343 354 356 358 359 360
365 368 369 374 375
14
421 422 423 436 438 439
441 444 454 456 458 460
463 464
8
10  11  131 142 164 178
180 184
12
534 545 557 559 569 570
571 573 574 579 581 582
11
643 654 656 658 659 660
665 668 669 674 675
}}}

_NOTE: The strict convention for the order of the node sets for problem type_ {{{'kubc'}}} _is XMIN, XMAX, YMIN, YMAX, ZMIN, ZMAX, corresponding to the 6 faces of a cube._