#summary Performance tables.
#sidebar TOC

= Introduction =

This page presents some basic performance data for the programs supplied with ParaFEM.

----

= 3D Small Strain Elasticity using the Finite Element Method =

The tables below give some performance figures for program p121 (3D small strain elasticity) using various systems. Basic data about the problem are listed as follows:

{{{
1,000,000 twenty noded brick elements
4,090,601 nodes
12,059,800 equations
}}}

== HECToR Phase 2b ==

|| Number of processors || Number of cores || Time (s) in solver || Speed up || Efficiency || Total time (s) || Speed up || Efficiency ||
||12{{{*}}}||12||-||-||-||-||-||-||
||2||24||1058||-||-||1124||-||-||
||4||48||478||-||-||535||-||-||
||8||96||247||-||-||299||-||-||
||16||192||129||-||-||184||-||-||
||32||384||67||-||-||118||-||-||
||64||768||36||-||-||87||-||-||
||128||1536||24||-||-||88||-||-||
||256{{{*}}}||3072||-||-||-||-||-||-||

{{{
* Memory fault reported by the system.
}}}

== HECToR Phase 3 ==

Using 12 (of 32) cores per node to match Phase 2b job sizes

|| Number of processors || Number of cores || Time (s) in solver || Speed up || Efficiency || Total time (s) || Speed up || Efficiency ||
||12||12||-||-||-||-||-||-||
||2||24||2094||-||-||2228||-||-||
||4||48||571||-||-||690||-||-||
||8||96||263||-||-||375||-||-||
||16||192||132||-||-||241||-||-||
||32||384||66||-||-||172||-||-||
||64||768||34||-||-||141||-||-||
||128||1536||18||-||-||130||-||-||
||256||3072||-||-||-||-||-||-||

== HECToR Phase 3 ==

Using all 32 cores per node. Each node has two 16 core processors.

|| Number of processors || Number of cores || Time (s) in solver || Speed up || Efficiency || Total time (s) || Speed up || Efficiency ||
||2{{{*}}}||32||-||-||-||-||-||-||
||4||64||417{{{**}}}||-||-||{{{539**}}}||-||-||
||8||128||198||-||-||311||-||-||
||16||256||99||-||-||211||-||-||
||32||512||50||-||-||159||-||-||
||64||1024||26||-||-||136||-||-||
||128||2048||14||-||-||128||-||-||
||256||4096||8||-||-||136||-||-||
||512||8192||##||-||-||##||-||-||

{{{
* Application terminated.
** Using CRAY compiler.
}}}

== CINECA IBM SP6 ==

|| Number of processors || Number of cores || Time (s) in solver || Speed up || Efficiency || Total time (s) || Speed up || Efficiency ||
||16||32{{{*}}}||-||-||-||-||-||-||
||32||64||250||-||-||382||-||-||
||64||128||124||-||-||253||-||-||
||128||256||66||-||-||193||-||-||
||256||512||38||-||-||168||-||-||

{{{
* Job failed with no error message
}}}

== Mare Nostrum IBM PowerPC 970MP ==

|| Number of processors || Number of cores || Time (s) in solver || Speed up || Efficiency || Total time (s) || Speed up || Efficiency ||
||{{{*}}}||8||2818||-||-||3036||-||-||
||8||16||2445||-||-||2644||-||-||
||16||32||1234||-||-||1417||-||-||
||32||64||638||-||-||813||-||-||
||64||128||326||-||-||500||-||-||
||128||256||209||-||-||378||-||-||
||256||512||187||-||-||386||-||-||

{{{
* This job used 1 core on 8 compute nodes. This was so that the program could reserve sufficient memory to run. The notional cost of the job was 32 cores, even though only 8 cores were used for execution.
}}}

{{{
8,000,000 twenty noded brick elements 
32,361,201 nodes
96,239,600 equations
}}}

== HECToR Phase 2b ==

|| Number of processors || Number of cores || Time (s) in solver || Speed up || Efficiency || Total time (s) || Speed up || Efficiency ||
||8||192||3072||-||-||4325||-||-||
||64||768||433||-||-||1658||-||-||
||128||1536||246||-||-||1468||-||-||
||256||3072||181||-||-||1402||-||-||
||512||6144||222||-||-||1462||-||-||

{{{
27,000,000 twenty noded brick elements 
108,811,801 nodes
324,539,400 equations
}}}

== HECToR Phase 2b ==

|| Number of processors || Number of cores || Time (s) in solver || Speed up || Efficiency || Total time (s) || Speed up || Efficiency ||
||256||3072||1290||-||-||9477||-||-||
||512||6144||4116||-||-||10257||-||-||

{{{
125,000 twenty noded brick elements 
522,801 nodes
}}}

== HECToR Phase 3 ==

Time (s) in solver for various core/node combinations:

|| *Number of Nodes * |||||||||||||||| *Number of PEs (total number of cores)*     ||
||      || *1* || *2* || *4* || *8* || *16* || *32* || *64* || *128* ||
|| * 1* ||-    ||-    ||242  ||206  ||103   ||52    ||X     ||X      ||
|| * 2* ||X    ||-    ||-    ||-    ||104   ||52    ||26    ||X      ||
|| * 4* ||X    ||X    ||-    ||-    ||61    ||52    ||26    ||13     ||
|| * 8* ||X    ||X    ||X    ||-    ||52    ||31    ||26    ||13     ||
|| *16* ||X    ||X    ||X    ||X    ||35    ||27    ||15    ||13     ||
|| *32* ||X    ||X    ||X    ||X    ||X     ||18    ||13    ||8      ||

----

= 3D Small Strain Elasticity using the Boundary Element Method =

== HECToR Phase 2a ==

The tables below give performance figures for program prog83 using HECToR Phase 2a, for different sizes of problem. Program prog83 solves a 3D elasticity problem using the boundary element method. Basic data regarding problem size are listed before each table.

{{{
600 elements
602 nodes 
1800 equations
}}}

|| Number of processors || Number of cores || Time (s) in solver || Speed up || Efficiency || Total time (s) || Speed up || Efficiency ||
||1||1||2.4||-||-||5.7||-||-||
||1||2||1.2||-||-||2.8||-||-||
||1||4||0.7||-||-||1.9||-||-||
||2||8||0.4||-||-||1.9||-||-||
||4||16||0.2||-||-||1.5||-||-||
||8||32||0.1||-||-||1.3||-||-||

{{{
9600 elements
9602 nodes 
28800 equations
}}}

|| Number of processors || Number of cores || Time (s) in solver || Speed up || Efficiency || Total time (s) || Speed up || Efficiency ||
||16||16||287||-||-||343||-||-||
||16||32||204||-||-||238||-||-||
||16||64||171||-||-||194||-||-||
||32||128||102||-||-||118||-||-||
||64||256||57||-||-||70||-||-||
||128||512||34||-||-||46||-||-||
||256||1024||24||-||-||36||-||-||

== CINECA IBM SP6 ==

The tables below give performance figures for program prog83 using CINECA's IBM SP6, for different sizes of problem. Program prog83 solves a 3D elasticity problem using the boundary element method. Basic data regarding problem size are listed before each table.

{{{
600 elements
602 nodes 
1800 equations
}}}

|| Number of processors || Number of cores || Time (s) in solver || Speed up || Efficiency || Total time (s) || Speed up || Efficiency ||
||1||2||0.6||-||-||2.1||-||-||
||2||4||0.3||-||-||1.4||-||-||
||4||8||0.3||-||-||1.1||-||-||
||8||16||0.15||-||-||0.7||-||-||
||16||32||0.14||-||-||0.67||-||-||

{{{
9600 elements
9602 nodes 
28800 equations
}}}

|| Number of processors || Number of cores || Time (s) in solver || Speed up || Efficiency || Total time (s) || Speed up || Efficiency ||
||8{{{*}}}||16||-||-||-||-||-||-||
||16||32||63||-||-||112||-||-||
||32||64||33||-||-||62||-||-||
||64||128||17||-||-||37||-||-||
||128||256||9||-||-||24||-||-||
||256||512||5||-||-||18||-||-||
||512||1024||4||-||-||15||-||-||

{{{
* Job failed with no error message
}}}

Note: Initial runs for this problem size did not complete and there were no error messages. The fix was to add the following command to the loadleveller batch script:

{{{
#@ resources = ConsumableMemory(3400MB)
}}}

This specifies the memory required per core, thus ensuring dedicated access to the memory on the node(s) used.

----

= Three dimensional Laplacian flow =

The table below gives some performance figures for program p123 (three dimensional Laplacian flow). Basic data about the problem are listed as follows:

{{{
125,000,000 eight noded brick elements 
125,000,000 equations
}}}

== HECToR Phase 3 ==

|| Number of processors || Number of cores || Time (s) in solver || Speed up || Efficiency || Total time (s) || Speed up || Efficiency ||
||16{{{*}}}||256||-||-||-||-||-||-||
||32||512||161||-||-||166||-||-||
||64||1024||83||-||-||87||-||-||
||128||2048||43||-||-||47||-||-||
||256||4096||24||-||-||29||-||-||
||512||8192||15||-||-||21||-||-||
||1024||16384||11||-||-||16||-||-||

{{{
* Not enough memory to run the job on a fully populated node (with 32 cores).
}}}

On HECToR Phase 3, each processor has 16 cores. 

_Total time (s)_ includes the initialization stage of the program. Initialization does not need to be repeated in a transient analysis. _Time in solver (s)_ is roughly equivalent to the time taken for one time step in a transient analysis.

= Direct Numerical Solution of the Navier Stokes Equations =


The table below gives some performance figures for program p126 (direct numerical solution of the Navier Stokes equations). Basic data about the problem are listed as follows:

{{{
1,000,000 twenty noded brick elements (eight for pressure) 
4,090,601 nodes
12,792,398 equations
}}}

== HECToR Phase 2b ==

|| Number of processors || Number of cores || Time (s) in solver || Speed up || Efficiency || Total time (s) || Speed up || Efficiency ||
||8||96||12932||-||-||13011||-||-||
||16||192||6040||-||-||6109||-||-||
||32||384||3119||-||-||3200||-||-||
||64||768||1987||-||-||2052||-||-||
||128||1536||1259||-||-||1321||-||-||
||256{{{*}}}||3072||-||-||-||-||-||-||

{{{
* Memory fault reported by the system.
}}}

== Mare Nostrum IBM PowerPC 970MP ==

|| Number of processors || Number of cores || Time (s) in solver || Speed up || Efficiency || Total time (s) || Speed up || Efficiency ||
||32||64||37744||-||-||37869||-||-||
||64||128||17014||-||-||17128||-||-||
||128||256||15734||-||-||15964||-||-||
||256||512||5007||-||-||5112||-||-||

----

= Forced Vibration of a 3D Elastic Solid =


The table below gives some performance figures for program p129 (forced vibration of a 3D elastic solid). Basic data about the problem are listed as follows:

{{{
135,000 twenty noded brick elements 
570,121 nodes
1,701,900 equations
40 time steps
}}}

== HECToR Phase 2b ==

|| Number of processors || Number of cores || Time (s) in solver || Speed up || Efficiency || Total time (s) || Speed up || Efficiency ||
||8||96||6270||-||-||6417||-||-||
||16||192||-||-||-||-||-||-||
||32||384||1674||-||-||1796||-||-||
||64||768||1254||-||-||1382||-||-||