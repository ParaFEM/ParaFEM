C  ********************************************************************
C  *                                                                  *
C  *                       Function dgsint                            *
C  *                                                                  *
C  ********************************************************************
c  Double Precision Version 1.0
C  Written by Gordon A. Fenton, Princeton, 1988.
c
c  PURPOSE  estimate the integral of a user supplied function using Gaussian
c           quadrature.
c
C  Returns the integral of a user supplied function via Gaussian Quadrature.
c  Arguments are described as follows;
c
c    fnc   externally supplied double precision function name which returns
c          the function values (this is the function to be integrated).
c          `fnc' is assumed to not blow up at any of the gauss points.
c
c    a     lower integration bound
c
c    b     upper integration bound
c
c    ng    number of gauss points desired (select from 1,2,3,4,5,6,7,8,9,10,
c          16, and 20)
c
C ========================================================================
      real*8 function dgsint( fnc, a, b, ng )
      implicit real*8 (a-h,o-z)
      dimension w(54), z(54), w16(8), z16(8), w20(10), z20(10)
      integer key(10)
      external fnc

      data key/1, 3, 6, 10, 15, 21, 28, 36, 45, 55/
      data zero/0.d0/, half/0.5d0/, two/2.d0/

      data w/1.00000000000000d0,1.000000000000000d0,.555555555555556d0,
     >        .888888888888889d0,.555555555555556d0,.347854845137454d0,
     >        .652145154862546d0,.652145154862546d0,.347854845137454d0,
     >        .236926885056189d0,.478628670499366d0,.568888888888889d0,
     >        .478628670499366d0,.236926885056189d0,.171324492379170d0,
     >        .360761573048139d0,.467913934572691d0,.467913934572691d0,
     >        .360761573048139d0,.171324492379170d0,.129484966168870d0,
     >        .279705391489277d0,.381830050505119d0,.417959183673469d0,
     >        .381830050505119d0,.279705391489277d0,.129484966168870d0,
     >        .101228536290376d0,.222381034453374d0,.313706645877887d0,
     >        .362683783378362d0,.362683783378362d0,.313706645877887d0,
     >        .222381034453374d0,.101228536290376d0,.081274388361574d0,
     >        .180648160694857d0,.260610696402935d0,.312347077040003d0,
     >        .330239355001260d0,.312347077040003d0,.260610696402935d0,
     >        .180648160694857d0,.081274388361574d0,.066671344308688d0,
     >        .149451349150581d0,.219086362515982d0,.269266719309996d0,
     >        .295524224714753d0,.295524224714753d0,.269266719309996d0,
     >        .219086362515982d0,.149451349150581d0,.066671344308688d0/
      data w16/0.027152459411754094852d0, 0.062253523938647892863d0,
     >         0.095158511682492784810d0, 0.124628971255533872052d0,
     >         0.149595988816576732081d0, 0.169156519395002538189d0,
     >         0.182603415044923588867d0, 0.189450610455068496285d0/
      data w20/0.017614007139152118312d0, 0.040601429800386941331d0,
     >         0.062672048334109063570d0, 0.083276741576704748725d0,
     >         0.101930119817240435037d0, 0.118194531961518417312d0,
     >         0.131688638449176626898d0, 0.142096109318382051329d0,
     >         0.149172986472603746788d0, 0.152753387130725850698d0/

      data z/-.577350269189626d0,.577350269189626d0,-.774596669241483d0,
     >       .000000000000000d0, .774596669241483d0,-.861136311594053d0,
     >      -.339981043584856d0, .339981043584856d0, .861136311594053d0,
     >      -.906179845938664d0,-.538469310105683d0, .000000000000000d0,
     >       .538469310105683d0, .906179845938664d0,-.932469514203152d0,
     >      -.661209386466265d0,-.238619186083197d0, .238619186083197d0,
     >       .661209386466265d0, .932469514203152d0,-.949107912342759d0,
     >      -.741531185599394d0,-.405845151377397d0, .000000000000000d0,
     >       .405845151377397d0, .741531185599394d0, .949107912342759d0,
     >      -.960289856497536d0,-.796666477413627d0,-.525532409916329d0,
     >      -.183434642495650d0, .183434642495650d0, .525532409916329d0,
     >       .796666477413627d0, .960289856497536d0,-.968160239507626d0,
     >      -.836031107326636d0,-.613371432700590d0,-.324253423403809d0,
     >       .000000000000000d0, .324253423403809d0, .613371432700590d0,
     >       .836031107326636d0, .968160239507626d0,-.973906528517172d0,
     >      -.865063366688985d0,-.679409568299024d0,-.433395394129247d0,
     >      -.148874338981632d0, .148874338981632d0, .433395394129247d0,
     >       .679409568299024d0, .865063366688985d0, .973906528517172d0/
      data z16/0.989400934991649932596d0, 0.944575023073232576078d0,
     >         0.865631202387831743880d0, 0.755404408355003033895d0,
     >         0.617876244402643748447d0, 0.458016777657227386342d0,
     >         0.281603550779258913230d0, 0.095012509837637440185d0/
      data z20/0.993128599185094924786d0, 0.963971927277913791268d0,
     >         0.912234428251325905868d0, 0.839116971822218823395d0,
     >         0.746331906460150792614d0, 0.636053680726515025453d0,
     >         0.510867001950827098004d0, 0.373706088715419560673d0,
     >         0.227785851141645078080d0, 0.076526521133497333755d0/

      rr = half*(b - a)
      ss = half*(b + a)
      dd = zero
      if( ng .le. 1 ) then
         dd = two*fnc(ss)
      elseif( ng .lt. 11 ) then
         j1   = key(ng-1)
         j2   = key(ng) - 1
         do 10 i = j1, j2
            dd = dd + w(i)*fnc(z(i)*rr+ss)
  10     continue
      elseif( ng .lt. 17 ) then
         do 20 i = 1, 8
            tt = rr*z16(i)
            dd = dd + w16(i)*(fnc(ss+tt) + fnc(ss-tt))
  20     continue
      else
         do 30 i = 1, 10
            tt = rr*z20(i)
            dd = dd + w20(i)*(fnc(ss+tt) + fnc(ss-tt))
  30     continue
      endif

      dgsint = rr*dd

      return
      end
