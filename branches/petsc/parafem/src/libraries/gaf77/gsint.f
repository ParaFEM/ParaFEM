C  ********************************************************************
C  *                                                                  *
C  *                       Function gsint                             *
C  *                                                                  *
C  ********************************************************************
c  Single Precision Version 1.0
C  Written by Gordon A. Fenton, Princeton, 1988.
c
c  PURPOSE  estimate the integral of a user supplied function using Gaussian
c           quadrature.
c
C  Returns the integral of a user supplied function via Gaussian Quadrature.
c  Arguments are described as follows;
c
c    fnc   externally supplied single precision function name which returns
c          the function values (this is the function to be integrated).
c          `fnc' is assumed to not blow up at any of the gauss points.
c
c    a     lower integration bound
c
c    b     upper integration bound
c
c    ng    number of gauss points desired (select from 1,2,3,4,5,6,7,8,9,10,
c          16, and 20)
c
C ========================================================================
      real function gsint( fnc, a, b, ng )
      real w(54), z(54), w16(8), z16(8), w20(10), z20(10)
      integer key(10)
      external fnc

      data key/1, 3, 6, 10, 15, 21, 28, 36, 45, 55/
      data zero/0.0/, half/0.5/, two/2.0/

      data w/1.00000000000000,1.000000000000000,.555555555555556,
     >        .888888888888889,.555555555555556,.347854845137454,
     >        .652145154862546,.652145154862546,.347854845137454,
     >        .236926885056189,.478628670499366,.568888888888889,
     >        .478628670499366,.236926885056189,.171324492379170,
     >        .360761573048139,.467913934572691,.467913934572691,
     >        .360761573048139,.171324492379170,.129484966168870,
     >        .279705391489277,.381830050505119,.417959183673469,
     >        .381830050505119,.279705391489277,.129484966168870,
     >        .101228536290376,.222381034453374,.313706645877887,
     >        .362683783378362,.362683783378362,.313706645877887,
     >        .222381034453374,.101228536290376,.081274388361574,
     >        .180648160694857,.260610696402935,.312347077040003,
     >        .330239355001260,.312347077040003,.260610696402935,
     >        .180648160694857,.081274388361574,.066671344308688,
     >        .149451349150581,.219086362515982,.269266719309996,
     >        .295524224714753,.295524224714753,.269266719309996,
     >        .219086362515982,.149451349150581,.066671344308688/
      data w16/0.027152459411754094852, 0.062253523938647892863,
     >         0.095158511682492784810, 0.124628971255533872052,
     >         0.149595988816576732081, 0.169156519395002538189,
     >         0.182603415044923588867, 0.189450610455068496285/
      data w20/0.017614007139152118312, 0.040601429800386941331,
     >         0.062672048334109063570, 0.083276741576704748725,
     >         0.101930119817240435037, 0.118194531961518417312,
     >         0.131688638449176626898, 0.142096109318382051329,
     >         0.149172986472603746788, 0.152753387130725850698/

      data z/-.577350269189626,.577350269189626,-.774596669241483,
     >       .000000000000000, .774596669241483,-.861136311594053,
     >      -.339981043584856, .339981043584856, .861136311594053,
     >      -.906179845938664,-.538469310105683, .000000000000000,
     >       .538469310105683, .906179845938664,-.932469514203152,
     >      -.661209386466265,-.238619186083197, .238619186083197,
     >       .661209386466265, .932469514203152,-.949107912342759,
     >      -.741531185599394,-.405845151377397, .000000000000000,
     >       .405845151377397, .741531185599394, .949107912342759,
     >      -.960289856497536,-.796666477413627,-.525532409916329,
     >      -.183434642495650, .183434642495650, .525532409916329,
     >       .796666477413627, .960289856497536,-.968160239507626,
     >      -.836031107326636,-.613371432700590,-.324253423403809,
     >       .000000000000000, .324253423403809, .613371432700590,
     >       .836031107326636, .968160239507626,-.973906528517172,
     >      -.865063366688985,-.679409568299024,-.433395394129247,
     >      -.148874338981632, .148874338981632, .433395394129247,
     >       .679409568299024, .865063366688985, .973906528517172/
      data z16/0.989400934991649932596, 0.944575023073232576078,
     >         0.865631202387831743880, 0.755404408355003033895,
     >         0.617876244402643748447, 0.458016777657227386342,
     >         0.281603550779258913230, 0.095012509837637440185/
      data z20/0.993128599185094924786, 0.963971927277913791268,
     >         0.912234428251325905868, 0.839116971822218823395,
     >         0.746331906460150792614, 0.636053680726515025453,
     >         0.510867001950827098004, 0.373706088715419560673,
     >         0.227785851141645078080, 0.076526521133497333755/

      rr = half*(b - a)
      ss = half*(b + a)
      dd = zero
      if( ng .le. 1 ) then
         dd = two*fnc(ss)
      elseif( ng .lt. 11 ) then
         j1   = key(ng-1)
         j2   = key(ng) - 1
         do 10 i = j1, j2
            dd = dd + w(i)*fnc(z(i)*rr+ss)
  10     continue
      elseif( ng .lt. 17 ) then
         do 20 i = 1, 8
            tt = rr*z16(i)
            dd = dd + w16(i)*(fnc(ss+tt) + fnc(ss-tt))
  20     continue
      else
         do 30 i = 1, 10
            tt = rr*z20(i)
            dd = dd + w20(i)*(fnc(ss+tt) + fnc(ss-tt))
  30     continue
      endif

      gsint = rr*dd

      return
      end
