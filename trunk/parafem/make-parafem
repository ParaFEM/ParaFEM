#!/bin/sh

# --------------------------------------------------------------------------------
# Script to build and install ParaFEM
# --------------------------------------------------------------------------------

# To log build output, run using something like:
# ./make-parafem 2>&1 | tee log
#

# Config vars (change as required)
# PARAFEM_HOME is the top level directory under which ParaFEM is compiled

if [ -z "$PARAFEM_HOME" ] ; then PARAFEM_HOME=~/dev/parafem/parafem ; fi
VERSION=2.1.0

# --------------------------------------------------------------------------------
# These are the default build parameters for the script and are used unless
# changed by calling the script with specific parameters.
# --------------------------------------------------------------------------------

# target flags - default release and install
DO_RELEASE=1
DO_DEBUG=0
DO_INSTALL=1
DO_CLEAN=0

# build flags - default all
BUILD_MODULES=1
BUILD_PROGRAMS=1
BUILD_TOOLS=1

# --------------------------------------------------------------------------------
# build type GROUPS and flags - defaults mpi and p12 are set below after ARG
# checks have been made and no options were specified on the command line
# --------------------------------------------------------------------------------
BUILD_MODULES_GIVEN=0
BUILD_PROGRAMS_GIVEN=0

# MODULE build options:
# - p12 group: for programs p121,p126,p129,p1210,p1211,p1212,p1213,(p121u)
#   options are: mpi(default), openmp, serial, gpu,
# - prog8 group: for programs prog81, prog82, prog83
#   options are: bem_lib, bem_lib_p
BUILD_MODULES_OPT=

# PROGRAM build options
# options are: p12(default), prog8(default), gaitfem(default)
BUILD_PROGRAMS_OPT=
BUILD_GROUP_P12="p121 p126 p129 p1210"
BUILD_GROUP_XX="xx1 xx2 xx3 xx4 xx5 xx6 xx7 xx8"
BUILD_GROUP_PROG8="prog81 prog82 prog83"
BUILD_GROUP_GAITFEM="gaitfem"

BUILD_MODULES_DEFAULTS="mpi serial bem_lib bem_lib_p"
BUILD_PROGRAMS_DEFAULTS="p12 prog8 xx"
# gaitfem"

# --------------------------------------------------------------------------------
# Local functions
# --------------------------------------------------------------------------------

showusage() {
    echo "To use the make-parafem script, please use one or more of the following options on the command line:"
    echo
    echo "Building the LIBRARIES:"
    echo "-mpi will build the MPI library for programs in the p12 and xx groups"
    echo "-bem_lib will build the BEM_LIB library for programs in the prog8 group"
    echo "-bem_lib_p will build the BEM_LIB_P library for programs in the prog8 group"
    echo "-all will build the MPI, BEM_LIB and BEM_LIB_P libraries for the p12 and prog8 programs"
    echo "* If no library option is specified then the default options are: mpi bem_lib bem_lib_p"
    echo
    echo "Building the PROGRAMS:"
    echo "-p12 will build the programs in the p12 group: $BUILD_GROUP_P12"
    echo "-xx will build the programs in the xx group: $BUILD_GROUP_XX"
    echo "-prog8 will build the programs in the prog8 group: $BUILD_GROUP_PROG8"
    echo "-gaitfem will build the programs in the gaitfem group: $BUILD_GROUP_GAITFEM"
    echo "* If no program option is specified then the default options are: p12 prog8 gaitfem"
    echo
    echo "RELEASE or DEBUG build options"
    echo "-debug will compile the selected libraries and programs with debugging enabled"
    echo "-release will compile the selected libraries and programs with the debugging disabled"
    echo "* the default mode is -release and does not require explicitly setting"
    echo
    # ...
}

# --------------------------------------------------------------------------------
# End of local functions
# --------------------------------------------------------------------------------

# --------------------------------------------------------------------------------
# Process all command line arguments
# --------------------------------------------------------------------------------
# LML: Some build options are not implemented yet and are commented out below
# --------------------------------------------------------------------------------

while [ $# -gt 0 ]; do
    ARG=`echo $1 | tr "[:upper:]" "[:lower:]"`
    case $ARG in
	-usage) showusage; exit;;
	-help) showusage; exit;;

	debug) DO_RELEASE=0; DO_DEBUG=1;;
	clean) DO_RELEASE=0; DO_DEBUG=0; DO_CLEAN=1;;
	realclean) DO_RELEASE=0; DO_DEBUG=0; DO_CLEAN=2;;
	execlean) DO_RELEASE=0; DO_DEBUG=0; DO_CLEAN=3;;

	# ------------------------------------------------------------------------
	# all module options
	-all) BUILD_MODULES_OPT="mpi bem_lib bem_lib_p"; BUILD_MODULES_GIVEN=1;;
	#-all) BUILD_MODULES_OPT="-mpi -openmp -gpu -serial -bem_lib -bem_lib_p"; BUILD_MODULES_GIVEN=1;;

	# ------------------------------------------------------------------------
	# p12 and xx group module options
	-mpi) BUILD_MODULES_OPT="$BUILD_MODULES_OPT mpi"; BUILD_MODULES_GIVEN=1;;
	#-openmp) BUILD_MODULES_OPT="$BUILD_MODULES_OPT openmp"; BUILD_MODULES_GIVEN=1;;
	#-gpu) BUILD_MODULES_OPT="$BUILD_MODULES_OPT gpu"; BUILD_MODULES_GIVEN=1;;
	#-serial) BUILD_MODULES_OPT="$BUILD_MODULES_OPT serial"; BUILD_MODULES_GIVEN=1;;

	# ------------------------------------------------------------------------
	# prog8 group module options
	-bem_lib) BUILD_MODULES_OPT="$BUILD_MODULES_OPT bem_lib"; BUILD_MODULES_GIVEN=1;;
	-bem_lib_p) BUILD_MODULES_OPT="%BUILD_MODULES_OPT bem_lib_p"; BUILD_MODULES_GIVEN=1;;

	# ------------------------------------------------------------------------
	# program group options
	-p12) BUILD_PROGRAMS_OPT="$BUILD_PROGRAMS_OPT p12"; BUILD_PROGRAMS_GIVEN=1;;
	-xx) BUILD_PROGRAMS_OPT="$BUILD_PROGRAMS_OPT xx"; BUILD_PROGRAMS_GIVEN=1;;
	-prog8) BUILD_PROGRAMS_OPT="$BUILD_PROGRAMS_OPT prog8"; BUILD_PROGRAMS_GIVEN=1;;
	-gaitfem) BUILD_PROGRAMS_OPT="$BUILD_PROGRAMS_OPT gaitfem"; BUILD_PROGRAMS_GIVEN=1;;

	# ------------------------------------------------------------------------
	# build restriction options
	--only-modules) BUILD_PROGRAMS=0; BUILD_TOOLS=0;;
	--only-programs) BUILD_MODULES=0; BUILD_TOOLS=0;;
	--only-tools) BUILD_MODULES=0; BUILD_PROGRAMS=0;;
	--no-install) DO_INSTALL=0;;
	machine=*) MACHINE=`echo $ARG | sed -e 's/machine=//g'`;;
    esac
    shift
done

echo "Starting make-parafem build script..."
echo "MACHINE set to $MACHINE";

# If no build options are given, report and set defaults
echo
if [ $BUILD_MODULES_GIVEN = 0 ]; then
    echo "No build type given for MODULES; defaulting to: $BUILD_MODULES_DEFAULTS"
    BUILD_MODULES_OPT=$BUILD_MODULES_DEFAULTS
fi

if [ $BUILD_PROGRAMS_GIVEN = 0 ]; then
    echo "No build type given for PROGRAMS; defaulting to: $BUILD_PROGRAMS_DEFAULTS"
    BUILD_PROGRAMS_OPT=$BUILD_PROGRAMS_DEFAULTS
fi

# --------------------------------------------------------------------------------
# Check that env vars are set
# --------------------------------------------------------------------------------

if [ -z "$PARAFEM_HOME" ] ; then
    echo
    echo "************************************************************************"
    echo "ERROR: PARAFEM_HOME not set!";
    echo "************************************************************************"
    exit 2
fi

if [ -z "$MACHINE" ] ; then
    echo
    echo "************************************************************************"
    echo "ERROR: MACHINE not set!"
    echo "************************************************************************"
    exit 2
else
    # convert MACHINE to lower case
    export MACHINE=`echo $MACHINE | tr "[:upper:]" "[:lower:]"`
fi 

export MK_PARAFEM_DEFS="$PARAFEM_HOME"/include/"$MACHINE".inc
if ! [ -f $MK_PARAFEM_DEFS ]; then
    echo
    echo "************************************************************************"
    echo "ERROR: Machine include file $MK_PARAFEM_DEFS does not exist!"
    echo "************************************************************************"
fi

# --------------------------------------------------------------------------------
# Setup targets for building MODULES and PROGRAMS
# --------------------------------------------------------------------------------

MODULES_TARGET=
TARGET=
if [ $DO_CLEAN -gt 0 ]; then
    case $DO_CLEAN in
	1) TARGET=clean;;
	2) TARGET=realclean;;
	3) TARGET=execlean;;
    esac
    MODULES_TARGET=clean;
else
    # for release/debug prefixes append each MODULES_BUILD_OPT
    if [ $DO_RELEASE = 1 ]; then
	for TYPE in $BUILD_MODULES_OPT; do
	    MODULES_TARGET="$MODULES_TARGET release-$TYPE"
	done
	TARGET=release
    else
	if [ $DO_DEBUG = 1 ]; then
	    for TYPE in $BUILD_MODULES_OPT; do
		MODULES_TARGET="$MODULES_TARGET debug-$TYPE"
	    done
	    TARGET=debug
	fi
    fi
    # append install rule if set
    if [ $DO_INSTALL = 1 ]; then
	MODULES_TARGET="$MODULES_TARGET install"
	TARGET="$TARGET install"
    fi
fi
echo
echo "MODULES TARGET is $MODULES_TARGET"
echo "TARGET is $TARGET for programs: $BUILD_PROGRAMS_OPT"

# --------------------------------------------------------------------------------
# Perform the requested builds
# --------------------------------------------------------------------------------

if [ $BUILD_MODULES = 1 ]; then
    echo "Building MODULES for $MACHINE"
    cd src/modules && make $MODULES_TARGET && cd ../..
    echo "Done building MODULES for $MACHINE"
fi

if [ $BUILD_PROGRAMS = 1 ]; then
    echo "Building PROGRAMS for $MACHINE"

    # build each program group selected
    for GROUP in $BUILD_PROGRAMS_OPT; do
	echo "Building GROUP $GROUP"
	case $GROUP in
	    p12)
		echo "p12: $BUILD_GROUP_P12"
		for PROG in $BUILD_GROUP_P12; do
		    cd src/programs/4th_ed/$PROG && make $TARGET && cd ../../../..
		done;;
	    xx)
		for PROG in $BUILD_GROUP_XX; do
		    cd src/programs/5th_ed/$PROG && make $TARGET && cd ../../../..
		done;;
	    prog8) 
		for PROG in $BUILD_GROUP_PROG8; do
		    cd src/programs/bsd/$PROG && make $TARGET && cd ../../../..
		done;;
	    gaitfem) 
		for PROG in $BUILD_GROUP_GAITFEM; do
		    cd src/programs/gaitfem && make $TARGET && cd ../../../..
		done;;
	esac
    done
fi

if [ $BUILD_TOOLS = 1 ]; then
    echo "Building TOOLS for $MACHINE"
fi


