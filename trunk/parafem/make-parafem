#!/bin/sh

# ------------------------------------------------------------------------------
# Script to build and install ParaFEM
# Author: Louise M. Lever
# ------------------------------------------------------------------------------

# To log build output, run using something like:
# ./make-parafem 2>&1 | tee log
#

# Config vars (change as required)
# PARAFEM_HOME is the top level directory under which ParaFEM is compiled

if [ -z "$PARAFEM_HOME" ] ; then PARAFEM_HOME=`pwd` ; fi
export PARAFEM_HOME

# Check for VERSION in mk_defs.inc file and export VERSION number
MK_DEFS=$PARAFEM_HOME/build/mk_defs.inc
if ! [ -f $MK_DEFS ]; then
    echo
    echo "*********************************************************************"
    echo "ERROR: ParaFEM MK_DEFS include file does not exist!"
    echo "*********************************************************************"
    exit
fi
. $MK_DEFS
export VERSION

# ------------------------------------------------------------------------------
# These are the default build parameters for the script and are used unless
# changed by calling the script with specific parameters.
# ------------------------------------------------------------------------------

# target flags - default release and install
DO_RELEASE=1
DO_DEBUG=0
DO_INSTALL=1
DO_CLEAN=0
DO_EXECLEAN=0

# build flags - default all
BUILD_MODULES=1
BUILD_LIBRARIES=1
BUILD_PROGRAMS=1
BUILD_TOOLS=1

# ------------------------------------------------------------------------------
# Build type GROUPS and FLAGS
# ------------------------------------------------------------------------------
# BUILD_*_GIVEN denotes if command line arguments have been provided to specify
#   what build groups should be processed.
# BUILD_*_DEFAULTS list all the group that should be built if no command line
#   arguments are given.
# BUILD_GROUP_* are the components of each group (if applicable)
# BUILD_*_OPT are the actual groups that will be built. They are initialized to
#   (null) here and either 1) set via command line arguments, or 2) set as the
#   defaults above if no arguments are provided.
# ------------------------------------------------------------------------------
BUILD_MODULES_GIVEN=0
BUILD_LIBRARIES_GIVEN=0
BUILD_PROGRAMS_GIVEN=0
BUILD_TOOLS_GIVEN=0

# MODULE build options:
# - p12 group: for programs p121,p123,p126,p129,p1210,p1211,p1212,p1213,(p121u)
#   options are: mpi(default), openmp, serial, gpu,
# - prog8 group: for programs prog81, prog82, prog83
#   options are: bem_lib, bem_lib_p
BUILD_MODULES_OPT=

# LIBRARIES build options:
# - options are: arpack(default) metis(default)
BUILD_LIBRARIES_OPT=

# PROGRAM build options
# options are: p12, 5ed, xx, prog8, gaitfem, rfem
BUILD_PROGRAMS_OPT=
BUILD_GROUP_P12="p121_4 p123_4 p125_4 p126_4 p129_4 p1210_4"
BUILD_GROUP_5ED="p121 p122 p123 p124 p125 p126 p127 p128 p129 p1210" # p1211
BUILD_GROUP_XX="xx1 xx11 xx12 xx7 xx8 xx14" # + xx1 xx2 xx3 xx4 xx5 xx6 xx9 xx10
BUILD_GROUP_PROG8="prog81 prog82 prog83"
BUILD_GROUP_GAITFEM="gaitfem"
BUILD_GROUP_RFEM= # "rfemsolve rfemsolve_te"

# TOOLS build options
BUILD_TOOLS_OPT=
BUILD_GROUP_PREPROC="inp2pf mg2d partitioner dinomesher fearfy KUBCgen rfemfield rfembc rfemcube p12meshgen"
BUILD_GROUP_POSTPROC="d2off bnd2dis mat2numpe upvw2dis pf2ensi pf2ensibin TTR_ensibin2ascii ttrb2ttr ndttrget"

# DEFAULT build options for LIBRARIES, MODULES, PROGRAMS and TOOLS
BUILD_LIBRARIES_DEFAULTS="arpack gaf77" # + metis
BUILD_MODULES_DEFAULTS="mpi serial bem_lib bem_lib_p"
BUILD_PROGRAMS_DEFAULTS="p12 5ed xx rfem" # + prog8 + gaitfem
BUILD_TOOLS_DEFAULTS="preproc postproc"

# ------------------------------------------------------------------------------
# Local functions
# ------------------------------------------------------------------------------

showusage() {
    echo "To capture a log file, please run the script as:"
    echo "  ./make-parafem <ARGS> 2>&1 | tee log"
    echo
    echo "To use the make-parafem script, please use one or more of the following options on the command line:"
    echo
    echo "Specify the architecture:"
    echo "  MACHINE=arch will set the machine to <arch>, where there exists an <arch.inc> file in build/"
    echo "  * If MACHINE is set as an environment variable then it will be used to specify the architecture"
    echo 
    echo "Building the LIBRARIES:"
    echo "  -arpack will build the ARPACK external library"
    echo "  -metis will build the METIS 4.0.3 external library"
    echo "  * If no library option is specified then the default builds are: $BUILD_LIBRARIES_DEFAULTS"
    echo
    echo "Building the MODULES:"
    echo "  -mpi will build the MPI library for programs in the p12, xx and rfem groups"
    echo "  -bem_lib will build the BEM_LIB library for programs in the prog8 group"
    echo "  -bem_lib_p will build the BEM_LIB_P library for programs in the prog8 group"
    echo "  * If no module option is specified then the default builds are: $BUILD_MODULES_DEFAULTS"
    echo 
    echo "Building the PROGRAMS:"
    echo "  -p12 will build the programs in the p12 group: $BUILD_GROUP_P12"
    echo "  -5ed will build the programs in the 5ed group: $BUILD_GROUP_5ED"
    echo "  -xx will build the programs in the xx group: $BUILD_GROUP_XX"
    echo "  -prog8 will build the programs in the prog8 group: $BUILD_GROUP_PROG8"
    echo "  -gaitfem will build the programs in the gaitfem group: $BUILD_GROUP_GAITFEM"
    echo "  -rfem will build the programs in the rfem group: $BUILD_GROUP_RFEM"
    echo "  * If no program option is specified then the default builds are: $BUILD_PROGRAMS_DEFAULTS"
    echo
    echo "Building the TOOLS:"
    echo "  -preproc will build the tools in the preproc group: $BUILD_GROUP_PREPROC"
    echo "  -postproc will build the tools in the postproc group: $BUILD_GROUP_POSTPROC"
    echo "  * If no tool option is specified then the default builds are: $BUILD_TOOLS_DEFAULTS"
    echo
    echo "RELEASE or DEBUG build options:"
    echo "  (-)debug will compile the selected libraries and programs with debugging enabled"
    echo "  (-)release will compile the selected libraries and programs with the debugging disabled"
    echo "  * the default mode is -release and does not require explicitly setting"
    echo
    echo "CLEAN options:"
    echo "  clean: will clean all the object files and any other temporary files from the build"
    echo "  execlean: will remove all compiled libraries, modules and executables"
    echo "  * both clean and execlean are restricted in their scope by the build options above"
    echo
    echo "Limiting build options:"
    echo "  --only-libs will only build the external libraries"
    echo "  --only-modules will only build the module libraries"
    echo "  --only-programs will only build the programs"
    echo "  --only-tools will only build the tools"
    echo "  --no-libs will disable the building of the external libraries"
    echo "  --no-tools will disable the building of the tools"
    echo "  --no-install will compile the libraries, modules, programs and tools but not install then in bin/"
    echo
}

error() {
    echo
    echo "^^^^^^^^^^ ERROR ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
    echo
    BUILD_ERRORS="$BUILD_ERRORS\nERROR in $1";
}

separator() {
    echo "---------------------------------------------------------------------"
}

# ------------------------------------------------------------------------------
# End of local functions
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Process all command line arguments
# ------------------------------------------------------------------------------
# LML: Some build options are not implemented yet and are commented out below
# ------------------------------------------------------------------------------

while [ $# -gt 0 ]; do
    ARG=`echo $1 | tr "[:upper:]" "[:lower:]"`
    case $ARG in
	-usage) showusage; exit;;
	usage) showusage; exit;;
	-help) showusage; exit;;
	help) showusage; exit;;

	debug) DO_RELEASE=0; DO_DEBUG=1;;
	-debug) DO_RELEASE=0; DO_DEBUG=1;;
	release) DO_RELEASE=1; DO_DEBUG=0;;
	-release) DO_RELEASE=1; DO_DEBUG=0;;
	clean) DO_RELEASE=0; DO_DEBUG=0; DO_CLEAN=1;;
	execlean) DO_RELEASE=0; DO_DEBUG=0; DO_EXECLEAN=1;;

	# ----------------------------------------------------------------------
	# library options
	-arpack) BUILD_LIBRARIES_OPT="$BUILD_LIBRARIES_OPT arpack"; BUILD_LIBRARIES_GIVEN=1;;
	-metis) BUILD_LIBRARIES_OPT="$BUILD_LIBRARIES_OPT metis"; BUILD_LIBRARIES_GIVEN=1;;

	# ----------------------------------------------------------------------
	# p12, xx and rfem group module options
	-mpi) BUILD_MODULES_OPT="$BUILD_MODULES_OPT mpi"; BUILD_MODULES_GIVEN=1;;
	-serial) BUILD_MODULES_OPT="$BUILD_MODULES_OPT serial"; BUILD_MODULES_GIVEN=1;;
	#-openmp) BUILD_MODULES_OPT="$BUILD_MODULES_OPT openmp"; BUILD_MODULES_GIVEN=1;;
	#-gpu) BUILD_MODULES_OPT="$BUILD_MODULES_OPT gpu"; BUILD_MODULES_GIVEN=1;;

	# ----------------------------------------------------------------------
	# prog8 group module options
	-bem_lib) BUILD_MODULES_OPT="$BUILD_MODULES_OPT bem_lib"; BUILD_MODULES_GIVEN=1;;
	-bem_lib_p) BUILD_MODULES_OPT="$BUILD_MODULES_OPT bem_lib_p"; BUILD_MODULES_GIVEN=1;;

	# ----------------------------------------------------------------------
	# program group options
	-p12) BUILD_PROGRAMS_OPT="$BUILD_PROGRAMS_OPT p12"; BUILD_PROGRAMS_GIVEN=1;;
	-5ed) BUILD_PROGRAMS_OPT="$BUILD_PROGRAMS_OPT 5ed"; BUILD_PROGRAMS_GIVEN=1;;
	-xx) BUILD_PROGRAMS_OPT="$BUILD_PROGRAMS_OPT xx"; BUILD_PROGRAMS_GIVEN=1;;
	-prog8) BUILD_PROGRAMS_OPT="$BUILD_PROGRAMS_OPT prog8"; BUILD_PROGRAMS_GIVEN=1;;
	-gaitfem) BUILD_PROGRAMS_OPT="$BUILD_PROGRAMS_OPT gaitfem"; BUILD_PROGRAMS_GIVEN=1;;
	-rfem) BUILD_PROGRAMS_OPT="$BUILD_PROGRAMS_OPT rfem"; BUILD_PROGRAMS_GIVEN=1;;

	# ----------------------------------------------------------------------
	# tool group module options
	-preproc) BUILD_TOOLS_OPT="$BUILD_TOOLS_OPT preproc"; BUILD_TOOLS_GIVEN=1;;
	-postproc) BUILD_TOOLS_OPT="%BUILD_TOOLS_OPT postproc"; BUILD_TOOLS_GIVEN=1;;

	# ----------------------------------------------------------------------
	# build restriction options
	--only-libs) BUILD_MODULES=0; BUILD_PROGRAMS=0; BUILD_TOOLS=0;;
	--only-modules) BUILD_LIBRARIES=0; BUILD_PROGRAMS=0; BUILD_TOOLS=0;;
	--only-programs) BUILD_LIBRARIES=0; BUILD_MODULES=0; BUILD_TOOLS=0;;
	--only-tools) BUILD_LIBRARIES=0; BUILD_MODULES=0; BUILD_PROGRAMS=0;;
	--no-libs) BUILD_LIBRARIES=0;;
	--no-tools) BUILD_TOOLS=0;;
	--no-install) DO_INSTALL=0;;
	machine=*) MACHINE=`echo $ARG | sed -e 's/machine=//g'`;;
    esac
    shift
done

echo "Starting make-parafem build script..."
echo "MACHINE set to $MACHINE";

# If no build options are given, report and set defaults
echo
if [ $BUILD_LIBRARIES = 1 ] && [ $BUILD_LIBRARIES_GIVEN = 0 ]; then
    echo "No build type given for LIBRARIES; defaulting to: $BUILD_LIBRARIES_DEFAULTS"
    BUILD_LIBRARIES_OPT=$BUILD_LIBRARIES_DEFAULTS
fi

if [ $BUILD_MODULES = 1 ] && [ $BUILD_MODULES_GIVEN = 0 ]; then
    echo "No build type given for MODULES; defaulting to: $BUILD_MODULES_DEFAULTS"
    BUILD_MODULES_OPT=$BUILD_MODULES_DEFAULTS
fi

if [ $BUILD_PROGRAMS = 1 ] && [ $BUILD_PROGRAMS_GIVEN = 0 ]; then
    echo "No build type given for PROGRAMS; defaulting to: $BUILD_PROGRAMS_DEFAULTS"
    BUILD_PROGRAMS_OPT=$BUILD_PROGRAMS_DEFAULTS
fi

if [ $BUILD_TOOLS = 1 ] && [ $BUILD_TOOLS_GIVEN = 0 ]; then
    echo "No build type given for TOOLS; defaulting to: $BUILD_TOOLS_DEFAULTS"
    BUILD_TOOLS_OPT=$BUILD_TOOLS_DEFAULTS
fi

# ------------------------------------------------------------------------------
# Check that env vars are set
# ------------------------------------------------------------------------------

if [ -z "$PARAFEM_HOME" ] ; then
    echo
    echo "*********************************************************************"
    echo "ERROR: PARAFEM_HOME not set!";
    echo "*********************************************************************"
    exit 2
fi

if [ -z "$MACHINE" ] ; then
    echo
    echo "*********************************************************************"
    echo "ERROR: MACHINE not set!"
    echo "*********************************************************************"
    exit 2
else
    # convert MACHINE to lower case
    export MACHINE=`echo $MACHINE | tr "[:upper:]" "[:lower:]"`
fi 

export MK_PARAFEM_DEFS="$PARAFEM_HOME"/build/"$MACHINE".inc
if ! [ -f $MK_PARAFEM_DEFS ]; then
    echo
    echo "*********************************************************************"
    echo "ERROR: Machine include file $MK_PARAFEM_DEFS does not exist!"
    echo "*******************************************************************"
fi

# ------------------------------------------------------------------------------
# Setup targets for building MODULES and PROGRAMS
# ------------------------------------------------------------------------------

LIBRARIES_TARGET=
MODULES_TARGET=
TARGET=
if [ $DO_CLEAN -gt 0 ] || [ $DO_EXECLEAN -gt 0 ]; then
    if [ $DO_CLEAN -gt 0 ]; then
	LIBRARIES_TARGET="$LIBRARIES_TARGET clean"
	MODULES_TARGET="$MODULES_TARGET clean"
	TARGET="$TARGET clean";
    fi
    if [ $DO_EXECLEAN -gt 0 ]; then
	LIBRARIES_TARGET="$LIBRARIES_TARGET execlean"
	MODULES_TARGET="$MODULES_TARGET execlean"
	TARGET="$TARGET execlean";
    fi
else
    # for release/debug prefixes append each MODULES_BUILD_OPT
    if [ $DO_RELEASE = 1 ]; then
	for TYPE in $BUILD_LIBRARIES_OPT; do
	    LIBRARIES_TARGET="$LIBRARIES_TARGET release-$TYPE"
	done
	for TYPE in $BUILD_MODULES_OPT; do
	    MODULES_TARGET="$MODULES_TARGET release-$TYPE"
	done
	TARGET=release
    else
	if [ $DO_DEBUG = 1 ]; then
	    for TYPE in $BUILD_LIBRARIES_OPT; do
		LIBRARIES_TARGET="$LIBRARIES_TARGET debug-$TYPE"
	    done
	    for TYPE in $BUILD_MODULES_OPT; do
		MODULES_TARGET="$MODULES_TARGET debug-$TYPE"
	    done
	    TARGET=debug
	fi
    fi
    # append install rule if set
    if [ $DO_INSTALL = 1 ]; then
	MODULES_TARGET="$MODULES_TARGET install"
	TARGET="$TARGET install"
    fi
fi
echo
echo "LIBRARIES TARGET is $LIBRARIES_TARGET"
echo "MODULES TARGET is $MODULES_TARGET"
echo "TARGET is $TARGET for programs: $BUILD_PROGRAMS_OPT"

# ------------------------------------------------------------------------------
# Perform the requested builds
# ------------------------------------------------------------------------------

if [ $BUILD_LIBRARIES = 1 ]; then
    echo
    echo "---------------------------------------------------------------------"
    echo "Building LIBRARIES for $MACHINE"
    echo "---------------------------------------------------------------------"
    cd $PARAFEM_HOME
    cd src/libraries && make $LIBRARIES_TARGET && cd ../..
    if [ $? = 2 ]; then	error "LIBRARIES/$LIBRARIES_TARGET"; fi
    echo "Done building LIBRARIES for $MACHINE"
fi

if [ $BUILD_MODULES = 1 ]; then
    echo
    echo "---------------------------------------------------------------------"
    echo "Building MODULES for $MACHINE"
    echo "---------------------------------------------------------------------"
    cd $PARAFEM_HOME
    cd src/modules && make $MODULES_TARGET && cd ../..
    if [ $? = 2 ]; then	error "MODULES/$MODULES_TARGET"; fi
    echo "Done building MODULES for $MACHINE"
fi

if [ $BUILD_PROGRAMS = 1 ]; then
    echo
    echo "---------------------------------------------------------------------"
    echo "Building PROGRAMS for $MACHINE"
    echo "---------------------------------------------------------------------"
    # build each program group selected
    for GROUP in $BUILD_PROGRAMS_OPT; do
	echo
	echo "-----------------------------------------------------------------"
	echo "Building GROUP $GROUP"
	echo "-----------------------------------------------------------------"
	case $GROUP in
	    p12)
		echo "p12: $BUILD_GROUP_P12"
		for PROG in $BUILD_GROUP_P12; do
		    separator
		    cd $PARAFEM_HOME
		    cd src/programs/4th_ed/$PROG && make $TARGET && cd ../../../..
		    if [ $? = 2 ]; then	error "BUILD_GROUP_P12/$PROG/$TARGET"; fi
		done;;
	    5ed)
		echo "5ed: $BUILD_GROUP_5ED"
		for PROG in $BUILD_GROUP_5ED; do
		    separator
		    cd $PARAFEM_HOME
		    cd src/programs/5th_ed/$PROG && make $TARGET && cd ../../../..
		    if [ $? = 2 ]; then	error "BUILD_GROUP_5ED/$PROG/$TARGET"; fi
		done;;

	    xx)
		for PROG in $BUILD_GROUP_XX; do
		    separator
		    cd $PARAFEM_HOME
		    cd src/programs/dev/$PROG && make $TARGET && cd ../../../..
		    if [ $? = 2 ]; then	error "BUILD_GROUP_XX/$PROG/$TARGET"; fi
		done;;
	    prog8) 
		for PROG in $BUILD_GROUP_PROG8; do
		    separator
		    cd $PARAFEM_HOME
		    cd src/programs/bsd/$PROG && make $TARGET && cd ../../../..
		    if [ $? = 2 ]; then	error "BUILD_GROUP_PROG8/$PROG/$TARGET"; fi
		done;;
	    gaitfem) 
		for PROG in $BUILD_GROUP_GAITFEM; do
		    separator
		    cd $PARAFEM_HOME
		    cd src/programs/gaitfem && make $TARGET && cd ../../..
		    if [ $? = 2 ]; then	error "BUILD_GROUP_GAITFEM/$PROG/$TARGET"; fi
		done;;
	    rfem) 
		for PROG in $BUILD_GROUP_RFEM; do
		    separator
		    cd $PARAFEM_HOME
		    cd src/programs/rfem/$PROG && make $TARGET && cd ../../../..
		    if [ $? = 2 ]; then	error "BUILD_GROUP_RFEM/$PROG/$TARGET"; fi
		done;;
	esac
    done
fi

if [ $BUILD_TOOLS = 1 ]; then
    echo
    echo "---------------------------------------------------------------------"
    echo "Building TOOLS for $MACHINE"
    echo "---------------------------------------------------------------------"
    for GROUP in $BUILD_TOOLS_OPT; do
	echo "Building GROUP $GROUP"
	case $GROUP in
	    preproc)
		echo "preproc: $BUILD_GROUP_PREPROC"
		for PROG in $BUILD_GROUP_PREPROC; do
		    separator
		    cd $PARAFEM_HOME
		    if [ -d src/tools/preprocessing/$PROG ]; then
			cd src/tools/preprocessing/$PROG && make $TARGET && cd ../../../..
			if [ $? = 2 ]; then error "BUILD_GROUP_PREPROC/$PROG/$TARGET"; fi
		    else
			error "BUILD_GROUP_PREPROC directory src/tools/preprocessing/$PROG does not exist"
		    fi
		done;;
	    postproc)
		echo "postproc: $BUILD_GROUP_POSTPROC"
		for PROG in $BUILD_GROUP_POSTPROC; do
		    separator
		    cd $PARAFEM_HOME
		    if [ -d src/tools/postprocessing/$PROG ]; then
			cd src/tools/postprocessing/$PROG && make $TARGET && cd ../../../..
			if [ $? = 2 ]; then error "BUILD_GROUP_POSTPROC/$PROG/$TARGET"; fi
		    else
			error "BUILD_GROUP_POSTPROC directory src/tools/postprocessing/$PROG does not exist"
		    fi
		done;;
	    esac
    done
fi

echo
echo "************************************************************************"
echo "Build ERRORS encountered:"
if [ "$BUILD_ERRORS" != "" ]; then
    echo -e $BUILD_ERRORS
else
    echo "  None"
fi
echo "************************************************************************"
echo
echo "ParaFEM Build Complete"
echo


